import { WritingTone } from '../types';
import { ArticleStructure } from './models';
import { supabase } from '../supabase';

/**
 * OpenAI APIを呼び出す共通関数
 */
async function callOpenAIFunction(messages: any[], options?: any) {
  let retryCount = 0;
  const maxRetries = 3;
  const baseDelay = 1000;

  while (retryCount < maxRetries) {
    try {
      console.log('Calling OpenAI Function...');
      console.log('Messages:', messages);

      const { data, error } = await supabase.functions.invoke('openai', {
        body: { 
          messages,
          options: {
            temperature: 0.7,
            top_p: 0.9,
            frequency_penalty: 0.0,
            presence_penalty: 0.0,
            max_tokens: 4000, // トークン制限を増加
            ...options
          }
        }
      });

      if (error) {
        console.error('Supabase Functions Error:', error);
        if (error.message?.includes('rate_limit_exceeded')) {
          const delay = baseDelay * Math.pow(2, retryCount);
          console.log(`Rate limit exceeded. Retrying in ${delay}ms...`);
          await new Promise(resolve => setTimeout(resolve, delay));
          retryCount++;
          continue;
        }
        throw error;
      }

      // 生成された内容の検証
      if (!data.content || typeof data.content !== 'string' || data.content.length < 10) {
        throw new Error('生成された内容が不適切です');
      }

      console.log('API Response:', data);
      return data.content;
    } catch (error) {
      console.error('API Call Error:', error);
      
      if (retryCount < maxRetries - 1) {
        retryCount++;
        const delay = baseDelay * Math.pow(2, retryCount);
        console.log(`Retrying in ${delay}ms... (Attempt ${retryCount + 1}/${maxRetries})`);
        await new Promise(resolve => setTimeout(resolve, delay));
        continue;
      }
      
      throw new Error('APIリクエストが失敗しました: ' + (error as Error).message);
    }
  }

  throw new Error('最大リトライ回数を超えました');
}

/**
 * ChatGPTにメッセージを送信し、応答を取得する
 */
export async function sendChatMessage(message: string): Promise<string> {
  return callOpenAIFunction([{ role: "user", content: message }]);
}

/**
 * システムプロンプトを含むチャット会話を送信する
 */
export async function sendChatMessageWithSystem(
  systemPrompt: string,
  userMessage: string
): Promise<string> {
  return callOpenAIFunction([
    { role: "system", content: systemPrompt },
    { role: "user", content: userMessage }
  ]);
}

/**
 * ブログのアウトラインを生成する
 */
export async function generateBlogOutline(theme: string, tone: WritingTone) {
  try {
    const messages = [
      {
        role: "system",
        content: `あなたはブログ記事のアウトライン生成を支援するアシスタントです。
以下の条件に従ってアウトラインを生成してください：
- 文体は${tone}を使用
- 2-5個のセクションを提案（最後のセクションは必ず「まとめ」または結論を示すセクション）
- 各セクションにはタイトルと簡単な説明を含める
- 最後のセクションは記事全体の結論やまとめとなるように設計
- JSONフォーマットで返答（以下の形式）：
{
  "sections": [
    {
      "title": "セクションタイトル",
      "content": "セクションの説明",
      "type": "main" | "conclusion"  // 最後のセクションは必ず"conclusion"
    }
  ]
}`
      },
      {
        role: "user",
        content: `テーマ: ${theme}
上記のテーマについて、ブログ記事のアウトラインを生成してください。
最後のセクションは必ず記事全体のまとめや結論となるようにしてください。`
      }
    ];

    const response = await callOpenAIFunction(messages);
    return validateOutlineResponse(response);
  } catch (error) {
    console.error('OpenAI API error:', error);
    throw new Error('アウトライン生成に失敗しました');
  }
}

/**
 * セクションの内容を生成する
 */
export async function generateBlogContent(theme: string, sectionTitle: string) {
  const maxRetries = 3;
  const retryDelay = 1000; // 1秒
  const maxTokensPerRequest = 2500;

  const generateWithRetry = async (retryCount: number): Promise<string> => {
    try {
      const messages = [
        {
          role: "system",
          content: `あなたはブログ記事のセクション内容を生成するアシスタントです。
以下の条件に従って内容を生成してください：
- マークダウン形式で出力
- 800字から1200字の範囲で生成
- 段落ごとに適切な改行を入れること
- 箇条書きやリストを効果的に使用
- 具体例や説明を含める
- 読みやすく、わかりやすい文章を心がける

構成：
1. 導入（200-300字）：トピックの概要と重要性
2. 本論（500-900字）：主要な論点と具体例の詳細な説明

注意：
- 文章は完結した形で終わること
- 段落間の繋がりを意識すること
- 読者にとって価値のある情報を提供すること`
        },
        {
          role: "user",
          content: `テーマ: ${theme}
セクションタイトル: ${sectionTitle}
上記のテーマとセクションタイトルに基づいて、セクションの内容を生成してください。`
        }
      ];

      const response = await callOpenAIFunction(messages, {
        max_tokens: maxTokensPerRequest,
        temperature: 0.7,
        presence_penalty: 0.3,
        frequency_penalty: 0.3
      });

      // 文字数チェック
      if (response.length < 800) {
        console.log('生成された内容が短すぎます。再試行します。');
        return generateWithRetry(retryCount);
      }

      if (response.length > 1200) {
        console.log('生成された内容が長すぎます。再試行します。');
        return generateWithRetry(retryCount);
      }

      return response;

    } catch (error) {
      if (error instanceof Error) {
        // APIレート制限エラーの場合
        if (error.message.includes('rate_limit') && retryCount < maxRetries) {
          console.log(`APIレート制限により失敗。${retryDelay}ms後にリトライします... (${retryCount + 1}/${maxRetries})`);
          await new Promise(resolve => setTimeout(resolve, retryDelay * (retryCount + 1)));
          return generateWithRetry(retryCount + 1);
        }
        
        // トークン制限エラーの場合
        if (error.message.includes('token') || error.message.includes('context_length')) {
          console.log('トークン制限により失敗。トークン数を調整して再試行します。');
          return generateWithRetry(retryCount);
        }
      }
      
      throw error;
    }
  };

  return generateWithRetry(0);
}

/**
 * 記事全体を生成する（セクション間の連携を保ちながら生成）
 */
export async function generateArticleContent(
  title: string,
  theme: string,
  sections: Array<{ title: string; type: 'main' | 'conclusion' }>,
  tone: WritingTone
) {
  const structure: ArticleStructure = {
    introduction: {
      title: sections[0].title,
      content: '',
      targetLength: { min: 200, max: 300 }
    },
    mainSections: sections.slice(1, -1).map(section => ({
      title: section.title,
      content: '',
      targetLength: { min: 600, max: 800 }
    })),
    conclusion: {
      title: sections[sections.length - 1].title,
      content: '',
      targetLength: { min: 200, max: 300 },
      fullContext: ''
    }
  };

  console.log(`記事「${title}」の生成を開始します`);

  try {
    // 導入部の生成
    console.log('導入部の生成を開始...');
    const introMessages = [
      {
        role: "system",
        content: `あなたはブログ記事の導入部を生成するアシスタントです。
以下の条件に従って導入部を生成してください：
- 文体は${tone}を使用
- ${structure.introduction.targetLength.min}〜${structure.introduction.targetLength.max}文字
- 記事全体の概要を簡潔に説明
- 読者の興味を引く導入
- 記事の目的を明確に示す
- 必ず完結した形で終わらせる
- 途中で文章が切れないようにする`
      },
      {
        role: "user",
        content: `タイトル: ${title}
テーマ: ${theme}
導入部のタイトル: ${structure.introduction.title}
上記の情報に基づいて、記事の導入部を生成してください。`
      }
    ];

    structure.introduction.content = await callOpenAIFunction(introMessages, {
      max_tokens: 1000,
      temperature: 0.7
    });
    console.log('導入部の生成が完了しました');

    // メインセクションの生成
    let previousContext = structure.introduction.content;
    for (let i = 0; i < structure.mainSections.length; i++) {
      const section = structure.mainSections[i];
      console.log(`メインセクション ${i + 1}/${structure.mainSections.length}「${section.title}」の生成を開始...`);

      const mainSectionMessages = [
        {
          role: "system",
          content: `あなたはブログ記事のメインセクションを生成するアシスタントです。
以下の条件に従って内容を生成してください：
- 文体は${tone}を使用
- ${section.targetLength.min}〜${section.targetLength.max}文字
- 前のセクションの内容を踏まえて展開
- 具体例や説明を含める
- 読みやすく、わかりやすい文章を心がける
- 次のセクションへの自然な繋がりを意識
- 必ず完結した形で終わらせる
- 途中で文章が切れないようにする`
        },
        {
          role: "user",
          content: `タイトル: ${title}
テーマ: ${theme}
セクションタイトル: ${section.title}
前のセクションの内容:
${previousContext}

上記の情報に基づいて、このセクションの内容を生成してください。`
        }
      ];

      section.content = await callOpenAIFunction(mainSectionMessages, {
        max_tokens: 2000,
        temperature: 0.7
      });
      previousContext = section.content;
      console.log(`メインセクション ${i + 1} の生成が完了しました`);

      // セクション間に適度な待機時間を設定
      if (i < structure.mainSections.length - 1) {
        await new Promise(resolve => setTimeout(resolve, 2000));
      }
    }

    // まとめの生成（最終セクション）
    console.log('まとめセクションの生成を開始...');
    const fullContext = [
      structure.introduction.content,
      ...structure.mainSections.map(section => section.content)
    ].join('\n\n');

    structure.conclusion.fullContext = fullContext;
    const conclusionMessages = [
      {
        role: "system",
        content: `あなたはブログ記事のまとめセクションを生成するアシスタントです。
これは記事全体の最後のセクションとして、以下の条件に従って生成してください：
- 文体は${tone}を使用
- ${structure.conclusion.targetLength.min}〜${structure.conclusion.targetLength.max}文字
- 記事全体の要点を簡潔にまとめる
- これまでの内容を総括
- 読者への具体的なアクションや次のステップを提案
- 記事全体の結論を明確に示す
- 必ず完結した形で終わらせる
- 途中で文章が切れないようにする`
      },
      {
        role: "user",
        content: `タイトル: ${title}
テーマ: ${theme}
まとめのタイトル: ${structure.conclusion.title}
これまでの記事の内容:
${fullContext}

上記の内容を踏まえて、記事全体のまとめとなる最終セクションを生成してください。
このセクションは記事全体の結論として、読者に明確なメッセージを残すように作成してください。`
      }
    ];

    structure.conclusion.content = await callOpenAIFunction(conclusionMessages, {
      max_tokens: 1000,
      temperature: 0.7
    });
    console.log('まとめセクションの生成が完了しました');

    // 生成された内容の検証
    const validateContent = (content: string, minLength: number, maxLength: number) => {
      if (!content || content.length < minLength) {
        throw new Error(`生成された内容が短すぎます（${content.length}文字）`);
      }
      if (content.length > maxLength) {
        throw new Error(`生成された内容が長すぎます（${content.length}文字）`);
      }
    };

    validateContent(structure.introduction.content, structure.introduction.targetLength.min, structure.introduction.targetLength.max);
    structure.mainSections.forEach(section => {
      validateContent(section.content, section.targetLength.min, section.targetLength.max);
    });
    validateContent(structure.conclusion.content, structure.conclusion.targetLength.min, structure.conclusion.targetLength.max);

    return {
      title,
      theme,
      sections: [
        { title: structure.introduction.title, content: structure.introduction.content, type: 'main' },
        ...structure.mainSections.map(section => ({
          title: section.title,
          content: section.content,
          type: 'main'
        })),
        { 
          title: structure.conclusion.title, 
          content: structure.conclusion.content,
          type: 'conclusion'
        }
      ]
    };

  } catch (error) {
    console.error('記事生成中にエラーが発生しました:', error);
    throw new Error('記事の生成に失敗しました: ' + (error as Error).message);
  }
}

// レスポンスの型定義
export interface GeneratedOutline {
  sections: {
    title: string;
    content: string;
    type: 'main' | 'conclusion';
  }[];
}

// レスポンスのバリデーション
export function validateOutlineResponse(response: string): GeneratedOutline {
  try {
    const parsed = JSON.parse(response);
    if (!parsed.sections || !Array.isArray(parsed.sections)) {
      throw new Error('Invalid outline format');
    }

    // 最後のセクションがconclusion typeであることを確認
    const lastSection = parsed.sections[parsed.sections.length - 1];
    if (!lastSection || lastSection.type !== 'conclusion') {
      throw new Error('Last section must be a conclusion');
    }

    return parsed;
  } catch (error) {
    console.error('Response validation error:', error);
    throw new Error('生成されたアウトラインの形式が不正です');
  }
}

/**
 * タイトルを生成する
 */
export async function generateTitle(theme: string, content?: string): Promise<string[]> {
  try {
    const messages = [
      {
        role: "system",
        content: "あなたはブログ記事のタイトルを生成する専門家です。SEOを意識した魅力的なタイトルを3つ提案してください。"
      },
      {
        role: "user",
        content: `以下の条件でブログ記事のタイトルを3つ提案してください：
        
テーマ: ${theme}
${content ? `内容の一部: ${content}\n` : ''}
条件：
- 読者の興味を引く魅力的なタイトル
- SEOを意識した検索されやすいタイトル
- 30文字以内
- 記事の価値が伝わるタイトル
- 日本語で提案

形式：
1. [タイトル1]
2. [タイトル2]
3. [タイトル3]`
      }
    ];

    const response = await callOpenAIFunction(messages);
    
    // レスポンスからタイトルを抽出
    const titles = response
      .split('\n')
      .filter((line: string) => line.trim().startsWith('1.') || line.trim().startsWith('2.') || line.trim().startsWith('3.'))
      .map((line: string) => line.replace(/^\d+\.\s*\[?|\]?$/g, '').trim());

    return titles;
  } catch (error) {
    console.error('OpenAI API error:', error);
    throw new Error('タイトル生成に失敗しました');
  }
}